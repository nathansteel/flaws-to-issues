{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/8fdfdd13-2284-4e67-bd1a-23357cc42065/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "8fdfdd13-2284-4e67-bd1a-23357cc42065",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 119586 bytes",
  "modules": [
    "webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war",
    "JS files within webgoat-container-7.1-SNAPSHOT.war"
  ],
  "modules_count": 10,
  "findings": [
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1004,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlStatement. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterValues.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "org/owasp/webgoat/lessons/admin/ViewDatabase.java",
          "line": 80,
          "function_name": "createContent",
          "qualified_function_name": "org.owasp.webgoat.lessons.admin.ViewDatabase.createContent",
          "function_prototype": "apache.ecs.Element createContent(session.WebSession)",
          "scope": "org.owasp.webgoat.lessons.admin.ViewDatabase"
        }
      },
      "flaw_match": {
        "procedure_hash": "3496192803",
        "prototype_hash": "1953662963",
        "flaw_hash": "390377922",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "153293750",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    },
    {
      "title": "javax.servlet.http.HttpServletResponse.addCookie",
      "issue_id": 1050,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of CRLF Sequences in HTTP Headers (\u0027HTTP Response Splitting\u0027)",
      "cwe_id": "113",
      "display_text": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variable cookies. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.\u003c/span\u003e \u003cspan\u003eEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/113.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/HTTP_Response_Splitting\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/HTTP-Response-Splitting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "org/owasp/webgoat/session/WebSession.java",
          "line": 297,
          "function_name": "eatCookies",
          "qualified_function_name": "org.owasp.webgoat.session.WebSession.eatCookies",
          "function_prototype": "void eatCookies()",
          "scope": "org.owasp.webgoat.session.WebSession"
        }
      },
      "flaw_match": {
        "procedure_hash": "985378488",
        "prototype_hash": "4146034803",
        "flaw_hash": "4257640498",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "765725407",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    },
    {
      "title": "org.slf4j.Logger.info",
      "issue_id": 1055,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to org.slf4j.Logger.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameterMap.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "org/owasp/webgoat/session/WebSession.java",
          "line": 1181,
          "function_name": "updateLastAttackRequestInfo",
          "qualified_function_name": "org.owasp.webgoat.session.WebSession.updateLastAttackRequestInfo",
          "function_prototype": "void updateLastAttackRequestInfo(javax.servlet.http.HttpServletRequest)",
          "scope": "org.owasp.webgoat.session.WebSession"
        }
      },
      "flaw_match": {
        "procedure_hash": "2284745939",
        "prototype_hash": "497972403",
        "flaw_hash": "3159190312",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2962402947",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    },
    {
      "title": "java.io.FileInputStream.!operator_javanewinit",
      "issue_id": 1023,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to java.io.FileInputStream.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable fileName. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameterValues, javax.servlet.ServletRequest.getParameterNames, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "org/owasp/webgoat/session/LessonTracker.java",
          "line": 226,
          "function_name": "load",
          "qualified_function_name": "org.owasp.webgoat.session.LessonTracker.load",
          "function_prototype": "LessonTracker load(WebSession, java.lang.String, Screen)",
          "scope": "org.owasp.webgoat.session.LessonTracker"
        }
      },
      "flaw_match": {
        "procedure_hash": "1337647823",
        "prototype_hash": "1871355003",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    },
    {
      "title": "PASSWORD initializer",
      "issue_id": 1003,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "crypto",
      "issue_type": "Use of Hard-coded Password",
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. PASSWORD initializer\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "org/owasp/webgoat/session/ECSFactory.java",
          "line": 1,
          "function_name": "UNKNOWN",
          "qualified_function_name": "UNKNOWN",
          "function_prototype": "UNKNOWN",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "327047908",
        "prototype_hash": "0",
        "flaw_hash": "1935972869",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "0",
        "cause_hash_count": 0,
        "cause_hash_ordinal": 0
      }
    },
    {
      "title": "Node.appendChild",
      "issue_id": 1001,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to Node.appendChild() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "plugin/ClientSideFiltering/js/clientSideFiltering.js",
          "line": 100,
          "function_name": "!func",
          "qualified_function_name": "!main.ajaxFunction.!func.!lambda1.!func",
          "function_prototype": "!js_object !func(!js_object, ...)",
          "scope": "^::!main::ajaxFunction::!func::!lambda1"
        }
      },
      "flaw_match": {
        "procedure_hash": "29757659",
        "prototype_hash": "410821927",
        "flaw_hash": "3132762339",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1
      }
    }
  ],
  "pipeline_scan": "21.1.3-0",
  "dev_stage": "DEVELOPMENT"
}